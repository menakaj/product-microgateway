// Code generated by go-swagger; DO NOT EDIT.

//
// This product is licensed by WSO2 Inc. under Apache License 2.0. The license
// can be downloaded from the following locations:
// 	http://www.apache.org/licenses/LICENSE-2.0.html
// 	http://www.apache.org/licenses/LICENSE-2.0.txt
//
// This product also contains software under different licenses. This table below
// all the contained libraries (jar files) and the license under which they are
// provided to you.
//
// At the bottom of this file is a table that shows what each license indicated
// below is and where the actual text of the license can be found.
//
//
// Dependency								License
// github.com/PuerkitoBio/purell						BSD 3-Clause "New" or "Revised" License
// github.com/PuerkitoBio/urlesc						BSD 3-Clause "New" or "Revised" License
// github.com/asaskevich/govalidator					MIT License
// github.com/census-instrumentation/opencensus-proto			Apache License 2.0
// github.com/cncf/udpa/go							Apache License 2.0
// github.com/decred/dcrd/dcrec/secp256k1					ISC License
// github.com/docker/go-units						Apache License 2.0
// github.com/envoyproxy/go-control-plane					Apache License 2.0
// github.com/envoyproxy/protoc-gen-validate				Apache License 2.0
// github.com/fsnotify/fsnotify						BSD 3-Clause "New" or "Revised" License
// github.com/getkin/kin-openapi						MIT License
// github.com/ghodss/yaml							MIT License
// github.com/go-openapi/analysis						Apache License 2.0
// github.com/go-openapi/errors						Apache License 2.0
// github.com/go-openapi/jsonpointer					Apache License 2.0
// github.com/go-openapi/jsonreference					Apache License 2.0
// github.com/go-openapi/loads						Apache License 2.0
// github.com/go-openapi/runtime						Apache License 2.0
// github.com/go-openapi/spec						Apache License 2.0
// github.com/go-openapi/strfmt						Apache License 2.0
// github.com/go-openapi/swag						Apache License 2.0
// github.com/go-openapi/validate						Apache License 2.0
// github.com/go-stack/stack						MIT License
// github.com/golang/protobuf						BSD 3-Clause "New" or "Revised" License
// github.com/google/uuid							BSD 3-Clause "New" or "Revised" License
// github.com/jessevdk/go-flags						BSD 3-Clause "New" or "Revised" License
// github.com/lestrrat-go/backoff						MIT License
// github.com/lestrrat-go/httpcc						MIT License
// github.com/lestrrat-go/iter						MIT License
// github.com/lestrrat-go/jwx						MIT License
// github.com/lestrrat-go/option						MIT License
// github.com/mailru/easyjson						MIT License
// github.com/mitchellh/mapstructure					MIT License
// github.com/pelletier/go-toml						MIT License
// github.com/pkg/errors							BSD 2-Clause "Simplified" License
// github.com/sirupsen/logrus						MIT License
// github.com/streadway/amqp						BSD 2-Clause "Simplified" License
// go.mongodb.org/mongo-driver						Apache License 2.0
// golang.org/x/crypto							BSD 3-Clause "New" or "Revised" License
// golang.org/x/net							BSD 3-Clause "New" or "Revised" License
// golang.org/x/sys							BSD 3-Clause "New" or "Revised" License
// golang.org/x/text							BSD 3-Clause "New" or "Revised" License
// google.golang.org/genproto						Apache License 2.0
// google.golang.org/grpc							Apache License 2.0
// google.golang.org/protobuf						BSD 3-Clause "New" or "Revised" License
// gopkg.in/natefinch/lumberjack.v2					MIT License
// gopkg.in/yaml.v2							Apache License 2.0
//
//
//
//
// The license types used by the above libraries and their information is given below:
//
// apache2        Apache License Version 2.0
//                http://www.apache.org/licenses/LICENSE-2.0.html
// mit            MIT License
//                http://www.opensource.org/licenses/mit-license.php
// bsd2           Berkeley License - 2
//                https://opensource.org/licenses/BSD-2-Clause
// bsd3           Berkeley License - 3
//                http://opensource.org/licenses/BSD-3-Clause
// isc	       Internet Systems Consortium
// 	       https://opensource.org/licenses/ISC
//
//

package api_individual

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// NewDeleteApisParams creates a new DeleteApisParams object
// with the default values initialized.
func NewDeleteApisParams() DeleteApisParams {

	var (
		// initialize parameters with default values

		orgIDDefault = string("carbon.super")
	)

	return DeleteApisParams{
		OrgID: &orgIDDefault,
	}
}

// DeleteApisParams contains all the bound params for the delete apis operation
// typically these are obtained from a http.Request
//
// swagger:parameters DeleteApis
type DeleteApisParams struct {

	// HTTP Request Object
	HTTPRequest *http.Request `json:"-"`

	/*Name of the API

	  Required: true
	  Max Length: 255
	  Min Length: 3
	  Pattern: ^[a-zA-Z0-9_~.-]*$
	  In: query
	*/
	APIName string
	/*Name of gateway environments separated by ":"

	  Max Length: 255
	  Pattern: ^[\w\s.-]*(:[\w\s.-]+)*$
	  In: query
	*/
	Environments *string
	/*The organization/ tenant domain which the api is belongs to

	  Max Length: 15
	  Min Length: 1
	  Pattern: ^[a-zA-Z0-9_.-]*$
	  In: query
	  Default: "carbon.super"
	*/
	OrgID *string
	/*version of the API

	  Required: true
	  Max Length: 15
	  Min Length: 1
	  Pattern: ^[a-zA-Z0-9_.-]*$
	  In: query
	*/
	Version string
	/*Virtual Host of the API

	  Max Length: 255
	  Pattern: ^(\*|(\*-|\*\.)?(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])(-\*|\.\*)?)$
	  In: query
	*/
	Vhost *string
}

// BindRequest both binds and validates a request, it assumes that complex things implement a Validatable(strfmt.Registry) error interface
// for simple values it will use straight method calls.
//
// To ensure default values, the struct must have been initialized with NewDeleteApisParams() beforehand.
func (o *DeleteApisParams) BindRequest(r *http.Request, route *middleware.MatchedRoute) error {
	var res []error

	o.HTTPRequest = r

	qs := runtime.Values(r.URL.Query())

	qAPIName, qhkAPIName, _ := qs.GetOK("apiName")
	if err := o.bindAPIName(qAPIName, qhkAPIName, route.Formats); err != nil {
		res = append(res, err)
	}

	qEnvironments, qhkEnvironments, _ := qs.GetOK("environments")
	if err := o.bindEnvironments(qEnvironments, qhkEnvironments, route.Formats); err != nil {
		res = append(res, err)
	}

	qOrgID, qhkOrgID, _ := qs.GetOK("orgId")
	if err := o.bindOrgID(qOrgID, qhkOrgID, route.Formats); err != nil {
		res = append(res, err)
	}

	qVersion, qhkVersion, _ := qs.GetOK("version")
	if err := o.bindVersion(qVersion, qhkVersion, route.Formats); err != nil {
		res = append(res, err)
	}

	qVhost, qhkVhost, _ := qs.GetOK("vhost")
	if err := o.bindVhost(qVhost, qhkVhost, route.Formats); err != nil {
		res = append(res, err)
	}
	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindAPIName binds and validates parameter APIName from query.
func (o *DeleteApisParams) bindAPIName(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("apiName", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("apiName", "query", raw); err != nil {
		return err
	}
	o.APIName = raw

	if err := o.validateAPIName(formats); err != nil {
		return err
	}

	return nil
}

// validateAPIName carries on validations for parameter APIName
func (o *DeleteApisParams) validateAPIName(formats strfmt.Registry) error {

	if err := validate.MinLength("apiName", "query", o.APIName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("apiName", "query", o.APIName, 255); err != nil {
		return err
	}

	if err := validate.Pattern("apiName", "query", o.APIName, `^[a-zA-Z0-9_~.-]*$`); err != nil {
		return err
	}

	return nil
}

// bindEnvironments binds and validates parameter Environments from query.
func (o *DeleteApisParams) bindEnvironments(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Environments = &raw

	if err := o.validateEnvironments(formats); err != nil {
		return err
	}

	return nil
}

// validateEnvironments carries on validations for parameter Environments
func (o *DeleteApisParams) validateEnvironments(formats strfmt.Registry) error {

	if err := validate.MaxLength("environments", "query", *o.Environments, 255); err != nil {
		return err
	}

	if err := validate.Pattern("environments", "query", *o.Environments, `^[\w\s.-]*(:[\w\s.-]+)*$`); err != nil {
		return err
	}

	return nil
}

// bindOrgID binds and validates parameter OrgID from query.
func (o *DeleteApisParams) bindOrgID(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		// Default values have been previously initialized by NewDeleteApisParams()
		return nil
	}
	o.OrgID = &raw

	if err := o.validateOrgID(formats); err != nil {
		return err
	}

	return nil
}

// validateOrgID carries on validations for parameter OrgID
func (o *DeleteApisParams) validateOrgID(formats strfmt.Registry) error {

	if err := validate.MinLength("orgId", "query", *o.OrgID, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("orgId", "query", *o.OrgID, 15); err != nil {
		return err
	}

	if err := validate.Pattern("orgId", "query", *o.OrgID, `^[a-zA-Z0-9_.-]*$`); err != nil {
		return err
	}

	return nil
}

// bindVersion binds and validates parameter Version from query.
func (o *DeleteApisParams) bindVersion(rawData []string, hasKey bool, formats strfmt.Registry) error {
	if !hasKey {
		return errors.Required("version", "query", rawData)
	}
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: true
	// AllowEmptyValue: false

	if err := validate.RequiredString("version", "query", raw); err != nil {
		return err
	}
	o.Version = raw

	if err := o.validateVersion(formats); err != nil {
		return err
	}

	return nil
}

// validateVersion carries on validations for parameter Version
func (o *DeleteApisParams) validateVersion(formats strfmt.Registry) error {

	if err := validate.MinLength("version", "query", o.Version, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("version", "query", o.Version, 15); err != nil {
		return err
	}

	if err := validate.Pattern("version", "query", o.Version, `^[a-zA-Z0-9_.-]*$`); err != nil {
		return err
	}

	return nil
}

// bindVhost binds and validates parameter Vhost from query.
func (o *DeleteApisParams) bindVhost(rawData []string, hasKey bool, formats strfmt.Registry) error {
	var raw string
	if len(rawData) > 0 {
		raw = rawData[len(rawData)-1]
	}

	// Required: false
	// AllowEmptyValue: false

	if raw == "" { // empty values pass all other validations
		return nil
	}
	o.Vhost = &raw

	if err := o.validateVhost(formats); err != nil {
		return err
	}

	return nil
}

// validateVhost carries on validations for parameter Vhost
func (o *DeleteApisParams) validateVhost(formats strfmt.Registry) error {

	if err := validate.MaxLength("vhost", "query", *o.Vhost, 255); err != nil {
		return err
	}

	if err := validate.Pattern("vhost", "query", *o.Vhost, `^(\*|(\*-|\*\.)?(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])(-\*|\.\*)?)$`); err != nil {
		return err
	}

	return nil
}
