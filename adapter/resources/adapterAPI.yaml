---
swagger: "2.0"
######################################################
# Prolog
######################################################
info:
  description: |
    This document specifies a **RESTful API** for WSO2 **API Microgateway** - Adapter.
  version: "v1.2"
  title: "WSO2 API Microgateway - Adapter"
  contact:
    name: "WSO2"
    url: "http://wso2.com/products/api-manager/"
    email: "architecture@wso2.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"

######################################################
# The fixed parts of the URLs of the API
######################################################

# The domain of the API.
# This is configured by the customer during deployment.
# The given host is just an example.
host: "apis.wso2.com"

# The base path of the API.
# Will be prefixed to all paths.
basePath: "/api/mgw/adapter/0.1"
schemes:
- "https"
consumes:
- "application/json"
- "multipart/form-data"
produces:
- "application/json"
securityDefinitions:
  BasicAuth:    
    type: basic
  BearerToken:
    type: oauth2
    tokenUrl: /oauth2/token
    flow: password
    scopes:
      admin: Grants deploy, undeploy, and list access

######################################################
# The Microgateway Adapter resource APIs
######################################################
paths:
  /oauth2/token:
    post:
      tags: 
        - Authorization
      summary: Get an access token
      description: |
        This operation can be used to get an access token by providing the username and password
        in the autherization header
      consumes:
        - application/json
      parameters:
        - name: credentials
          in: body
          description: Credentials of the microgateway REST API user
          required: true
          schema:
            $ref: '#/definitions/Credentials'
      responses:
        200:
          description: |
            Authentication successful. 
            Returns an access token.
          schema:
            type: object
            properties:
              accessToken:
                type: string
        401:
          $ref: '#/responses/Unauthorized'
        500: 
          $ref: '#/responses/ServerError'
  /apis:
    #-----------------------------------------------------
    # Deploy an API in the Microgateway
    #-----------------------------------------------------
    post:
      tags:
      - API (Individual)
      summary: Deploy or update an API
      description: "This operation can be used to deploy or update an API.\n"
      consumes:
      - multipart/form-data
      parameters:
      - name: file
        in: formData
        description: "Zip archive consisting on exported api configuration\n"
        required: true
        type: file
        x-exportParamName: File
      - name: override
        in: query
        description: "Whether to force create an API. When this is true, overrides if \
          \ an API already exists.\n"
        required: false
        type: boolean
        x-exportParamName: Override
        x-optionalDataType: Bool
      responses:
        200:
          description: |
            Successful.
            API deployed or updated Successfully.
          schema:
            $ref: '#/definitions/DeployResponse'
        401:
          $ref: '#/responses/Unauthorized'         
        409:
          description: |
            Conflict.
            API to import already exists (when overwride parameter is not included).
          schema:
            $ref: "#/definitions/Error"
        500: 
          $ref: '#/responses/ServerError'
      security:
      - BasicAuth: []
      - BearerToken: [admin]
      x-wso2-curl: "curl -k -F \"file=@exported.zip\" -X POST -H \"Authorization:\
        \ Basic ae4eae22-3f65-387b-a171-d37eaa366fa8\" https://localhost:9443/api/mgw/adapter/0.1/apis?overwride=true"
      x-wso2-request: "POST https://localhost:9443/api/mgw/adapter/0.1/apis\nAuthorization:\
        \ Basic ae4eae22-3f65-387b-a171-d37eaa366fa8\n"
      x-wso2-response: "HTTP/1.1 200 OK\nAPI deployed successfully."
    #-----------------------------------------------------
    # Undeploy/Delete an API from the Microgateway
    #-----------------------------------------------------
    delete:
      tags: 
        - API (Individual)
      summary: Delete deployed API
      description: |
        This operation can be used to delete a API that was deployed
      parameters:
        - name: apiName
          description: |
            Name of the API
          in: query
          type: string
          required: true
          minLength: 3
          maxLength: 255
          pattern: ^[a-zA-Z0-9_~.-]*$
        - name: version
          description: |
            version of the API
          in: query
          type: string
          required: true
          minLength: 1
          maxLength: 15
          pattern: ^[a-zA-Z0-9_.-]*$
        - name: vhost
          description: |
            Virtual Host of the API
          in: query
          type: string
          maxLength: 255
          # hostname regex as per RFC 1123 (http://tools.ietf.org/html/rfc1123)
          # regex: ^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])$
          # examples: *.wso2.com localhost *-wso2.com foo.* foo-* also supports *.wso2.*
          pattern: ^(\*|(\*-|\*\.)?(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]*[A-Za-z0-9])(-\*|\.\*)?)$
        - name: environments
          description: |
            Name of gateway environments separated by ":"
          in: query
          type: string
          maxLength: 255
          # example: Production and Sandbox:Label1:Label2
          pattern: ^[\w\s.-]*(:[\w\s.-]+)*$
        - name: orgId
          description: |
            The organization/ tenant domain which the api is belongs to
          in: query
          type: string
          required: false
          default: carbon.super
          minLength: 1
          maxLength: 15
          pattern: ^[a-zA-Z0-9_.-]*$
      responses:
        200:
          description: |
            OK.
            API successfully undeployed from the Microgateway.
          schema:
            $ref: '#/definitions/DeployResponse'
        401:
          $ref: '#/responses/Unauthorized'
        400:
          description: |
            Bad Request.
            Invalid request or validation error
          schema:
            $ref: '#/definitions/Error'
        404:
          description: |
            Not Found.
            Requested API does not exist.
          schema:
            $ref: '#/definitions/Error'
        500: 
          $ref: '#/responses/ServerError'
      security:
      - BasicAuth: []
      - BearerToken: [admin]
      x-wso2-curl: |
        curl -k -H "Authorization: Basic ae4eae22-3f65-387b-a171-d37eaa366fa8" 
        -d '{"apiName":"petstore", "version":"1.1", "vhost":"www.pets.com"}'
        -X DELETE "https://127.0.0.1:9443/api/mgw/adapter/0.1/apis"
      x-wso2-request: |
        DELETE https://127.0.0.1:9443/api/mgw/adapter/0.1/apis
        Authorization: Basic ae4eae22-3f65-387b-a171-d37eaa366fa8
        {"apiName":"petstore", "version":"1.1", "vhost":"www.pets.com"}
      x-wso2-response: "HTTP/1.1 200 OK"
  
    #-----------------------------------------------------
    # List APIs
    #-----------------------------------------------------
    get:
      tags: 
        - API (Collection)
      summary: Get a list of API metadata
      description: |
        This operation can be used to retrieve meta info about all APIs
      parameters:
        - name : query
          in: query
          description: |
            Optional - Condition to filter APIs. Currently only filtering 
            by API type (HTTP or WebSocket) is supported.
            "type:http" for HTTP type
            "type:ws" for WebSocket type
          type: string
          maxLength: 9
          pattern: ^[a-zA-Z:]*$
        - name : limit
          in: query
          description: |
            Number of APIs (APIMeta objects to return)
          type: integer
          minimum: 1
          maximum: 100000000
        - name: orgId
          description: |
            The organization/ tenant domain which the api is belongs to
          in: query
          type: string
          required: false
          default: carbon.super
          minLength: 1
          maxLength: 15
          pattern: ^[a-zA-Z0-9_.-]*$
      responses:
        200:
          description: An array of API Metadata
          schema:
            $ref: '#/definitions/APIMeta'
        401:
          $ref: '#/responses/Unauthorized'
        500: 
          $ref: '#/responses/ServerError'
      security:
      - BasicAuth: []
      - BearerToken: [admin]
      x-wso2-curl: |
        curl -k -H "Authorization: Basic ae4eae22-3f65-387b-a171-d37eaa366fa8" 
        -X GET "https://127.0.0.1:9443/api/mgw/adapter/0.1/apis"
      x-wso2-request: |
        GET https://127.0.0.1:9443/api/mgw/adapter/0.1/apis?apiType=http
        Authorization: Basic ae4eae22-3f65-387b-a171-d37eaa366fa8
      x-wso2-response: "HTTP/1.1 200 OK"

######################################################
# Common Responses
######################################################
responses:
  Unauthorized:
    description: Unauthorized. Invalid authentication credentials.
    schema:
      $ref: "#/definitions/Error"
  ServerError:
    description: Internal Server Error.
    schema:
      $ref: "#/definitions/Error"
######################################################
# Definitions
######################################################   
definitions:
  Credentials:
    required:
    - username
    - password
    properties:
      username:
        type: string
        description: Username of the microgateway REST API user
        maxLength: 100
        pattern: ^[a-zA-Z0-9_~.@-]*$
      password:
        type: string
        description: Password of the microgateway REST API user
        maxLength: 100
        pattern: ^[a-zA-Z0-9_~.@-]*$
  Error:
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "integer"
        format: "int64"
        description: "Error code"
      message:
        type: "string"
        description: "Error message."
      description:
        type: "string"
        description: "A detail description about the error message.\n"
      moreInfo:
        type: "string"
        description: "Preferably an url with more details about the error.\n"
      error:
        type: "array"
        description: "If there are more than one error list them out.\nFor example,\
          \ list out validation errors by each field.\n"
        items:
          $ref: "#/definitions/ErrorListItem"
    title: "Error object returned with 4XX HTTP status"
  ErrorListItem:
    required:
    - "code"
    - "message"
    properties:
      code:
        type: "string"
        description: "Error code"
      message:
        type: "string"
        description: "Description about individual errors occurred\n"
    title: "Description of individual errors that may have occurred during a request."
  Principal:
    type: object
    properties:
      username:
        type: string
      token:
        type: string
  APIMeta:
    properties:
      total:
        type: integer
        description: Total number of APIs available in the MGW
      count:
        type: integer
        description: Number of APIs returned in the response
      list:
        type: array
        description: All or sub set of info about APIs in the MGW
        items:
          $ref: "#/definitions/APIMetaListItem"
  APIMetaListItem:
    type: object
    properties:
      apiName:
        type: string
      version:
        type: string
      apiType: 
        type: string
      context:
        type: string
      gateway-envs:
        type: array
        items:
          type: string
      vhost:
        type: string
  DeployResponse:
    type: object
    properties:
      action:
        type: string
      info:
        type: string
